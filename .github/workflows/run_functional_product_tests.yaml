# Purpose: Run the product functional tests every night

name: Nightly Product Functional Tests

# Run this workflow at 12:15 am
# on every Sun to Thr (b/c GMT -5)
on:
  schedule:
    - cron: "15 4 * * 0-4"
  push:
  workflow_dispatch:

jobs:
  build-matrix:
    name: Build Matrix
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Generate Matrix
        id: generate-matrix
        # The testing params are stored as a string in a CSV-like format.
        # Pipes separate products, and commas separate key/value pairs.
        # key1=value1,key2=value2|key3=value3,key4=value4...
        # This job parses the key-value pairs and put them to an array
        # that will be used as a matrix for testing each product variation.
        run: |
          $params = $env:TestParams
          # Powershell doesn't build arrays in the format that a matrix
          # wants, so this builds it using a string instead.  It's ugly.
          $productsAsList = "["
          # Split into products
          $products = $params.split("|")
          foreach ($product in $products)
          {
            # Since commas will separate products in the matrix,
            # this will use semi-colons to separate key-value pairs.
            # TODO: Change this in the secret and drop this next line.
            $product = $product.replace(',', ';')
            $productsAsList += '"'
            # This trim is necessary because the final product ends with
            # a newline that causes problems.
            $productsAsList += $product.Trim()
            $productsAsList += '",'
          }
          $productsAsList = $productsAsList.Substring(0, $productsAsList.Length-1)
          $productsAsList += ']'
          # Store the string "array" where it can be accessed as an output.
          echo products=$productsAsList >> $env:GITHUB_OUTPUT
        env:
          TestParams: ${{ secrets.NIGHTLY_TEST_BUILD_PARAMS }}
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.products }}
  product-tests:
    name: Product Test
    runs-on: windows-latest
    defaults:
      run:
        shell: powershell
    needs: 
      - build-matrix
    strategy:
      matrix:
        # Each item in the matrix is one set of product parameters
        # and thus should cause one step in this job.  This should
        # make it easy to debug when a product is failing the 
        # functional tests.
        product: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    steps:
      # - name: Create PFX
      #   run: |
      #     New-Item -ItemType file -Path ./key.txt
      #     Set-Content -Path ./key.txt -Value $env:PfxBase64
      #     certutil -decode ./key.txt ./key.pfx
      #   env:
      #     PfxBase64: ${{ secrets.NIGHTLY_TEST_BUILD_PFX }}
      # - name: Import PFX
      #   # Pipe to Out-Null to hide the thumbprint
      #   run: Import-PfxCertificate -Password (ConvertTo-SecureString -String $env:PfxPassword -AsPlainText -Force) -CertStoreLocation Cert:\CurrentUser\My -FilePath ./key.pfx | Out-Null
      #   env:
      #     PfxPassword: ${{ secrets.NIGHTLY_TEST_BUILD_PW }}
      # - name: Get Thumbprint
      #   id: getthumbprint
      #   run: |
      #     $x509 = Get-PfxCertificate -FilePath ./key.pfx -Password (ConvertTo-SecureString -String $env:PfxPassword -AsPlainText -Force)
      #     $Thumbprint = $x509.ThumbPrint
      #     # Pass thumbprint to later job.
      #     echo THUMBPRINT=$Thumbprint >> $env:GITHUB_OUTPUT
      #   shell: pwsh # -Password flag requires PS 6+
      #   env:
      #     PfxPassword: ${{ secrets.NIGHTLY_TEST_BUILD_PW }}
      # - name: Checkout Repo
      #   uses: actions/checkout@v4
      # - name: Setup for Scuba
      #   run: ./SetUp.ps1
      # - name: Install Selenium
      #   run: Install-Module -Name Selenium
      # - name: Update Selenium
      #   run: ./Testing/Functional/SmokeTest/UpdateSelenium.ps1
      - name: Test
        # This job parses the keys and values in the matrx array
        # and converts them to a hashtable.
        run: |
          # Read thumbprint from previous job.
          # $thumbprint = "${{ steps.getthumbprint.outputs.THUMBPRINT }}"
          $params = "${{ matrix.product }}"
          echo "Testing $params"
          $paramsAsHashTable = @{}
          # Split into pairs
          $pairs = $params.split(";")  # Because I replaced , with ; in matrix
          foreach ($pair in $pairs)
          {
            # Split the key from the value
            $keyAndValue = $pair.split("=")
            $paramsAsHashTable.Add($keyAndValue[0], $keyAndValue[1])
          }
          echo "The hashtable is $paramsAsHashTable"
          # ./Testing/Functional/Products/Tests/CallProductTests.ps1 -params $paramsAsHashTable -thumbprint $thumbprint
